{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docs","text":"<p>Bienvenido a Quantil Docs, la documentaci\u00f3n oficial de Quantil | Miner\u00eda de datos  para estandarizar flujos de trabajo, garantizar la consistencia en los proyectos y facilitar la incorporaci\u00f3n de nuevos miembros del equipo. Esta documentaci\u00f3n sirve como una gu\u00eda para todos los investigadores y colaboradores de Quantil, proporcionando mejores pr\u00e1cticas, herramientas y plantillas tanto para Proyectos de Ciencia de Datos como para Desarrollo de Librer\u00edas.</p>"},{"location":"#primeros-pasos","title":"Primeros pasos","text":"<p>Dado que est\u00e1 en fase Beta, te invito a revisar la documentaci\u00f3n en orden (como se presenta en la secci\u00f3n de Contenido) y verificar que todo funcione correctamente, incluyendo los comandos de instalaci\u00f3n y los enlaces. Si encuentras errores, m\u00f3dulos faltantes, secciones mejorables o ejemplos necesarios, crea un Issue para sugerir mejoras.</p>"},{"location":"#contenido","title":"Contenido","text":"<ol> <li>Herramientas y Est\u00e1ndares: Conoce las herramientas y est\u00e1ndares que utilizamos en todos los proyectos.</li> <li>Plantillas de Proyectos: Explora nuestras plantillas para proyectos de Ciencia de Datos y desarrollo de librer\u00edas.</li> <li>Ejemplos: Consulta ejemplos reales de c\u00f3mo estructuramos y ejecutamos proyectos.</li> <li>Flujo de Trabajo y Mejores Pr\u00e1cticas: Entiende el ciclo de vida de nuestros proyectos y las mejores pr\u00e1cticas.</li> </ol>"},{"location":"#autores","title":"Autores","text":"@dataguirre Investigador Senior"},{"location":"#agradecimientos","title":"Agradecimientos","text":"<p>El dise\u00f1o de las plantillas de ciencia de datos y creaci\u00f3n de librer\u00edas fue parcialmente basado en las plantillas de Cookiecutter Data Science y Cookiecutter uv.</p>"},{"location":"templates/","title":"Plantillas de proyectos","text":"<p>Las plantillas de Quantil est\u00e1n dise\u00f1adas con base en nuestra experiencia y los est\u00e1ndares modernos de la industria. Sus caracter\u00edsticas principales son:</p> <ul> <li><code>uv</code> para manejo de dependencias y de ambientes virtuales</li> <li>CI/CD con Github Actions</li> <li>Calidad de c\u00f3digo con <code>ruff</code> y <code>mypy</code>.</li> <li>Testing y coverage con <code>pytest</code> y <code>coverage</code>.</li> <li>Documentaci\u00f3n con <code>mkdocs</code></li> <li>Compatibilidad de testeo para m\u00faltiples versiones de python con <code>tox-uv</code></li> <li>Recetas para ejecutar con <code>make</code></li> </ul> <p>Utilizamos la herramienta CookieCutter para inicializar las plantillas de forma \u00f3ptima.</p>"},{"location":"templates/#proyecto-de-ciencia-de-datos","title":"Proyecto de ciencia de datos","text":"<p>Dado que en este tipo de proyectos trabajamos con datos, modelos, entre otras cosas, nos basamos parcialmente en las plantillas Cookie Cutter Data Science y CookieCutter uv. </p> <pre><code>uvx cookiecutter https://github.com/quantilma/template-ds\n</code></pre> Comando uvx <p><code>uvx</code> viene con la instalaci\u00f3n de <code>uv</code>. Para instalar <code>uv</code>:</p> Linux/MacOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh \n</code></pre> <pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>Para mayor informaci\u00f3n de c\u00f3mo instalar <code>uv</code>, seguir la gu\u00eda oficial de instalaci\u00f3n de uv.</p> <p>En caso de no usar <code>uv</code>, se puede reemplazar por <code>pip</code>: <pre><code>pip install cookiecutter\ncookiecutter https://github.com/quantilma/template-ds\n</code></pre></p> <p>El anterior comando genera la siguiente estructura de directorio:</p> <pre><code>\u251c\u2500\u2500 LICENSE            &lt;- Open-source license if one is chosen\n\u251c\u2500\u2500 Makefile           &lt;- Makefile with convenience commands like `make data` or `make train`\n\u251c\u2500\u2500 README.md          &lt;- The top-level README for developers using this project.\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external       &lt;- Data from third party sources.\n\u2502   \u251c\u2500\u2500 interim        &lt;- Intermediate data that has been transformed.\n\u2502   \u251c\u2500\u2500 processed      &lt;- The final, canonical data sets for modeling.\n\u2502   \u2514\u2500\u2500 raw            &lt;- The original, immutable data dump.\n\u2502\n\u251c\u2500\u2500 docs               &lt;- A default mkdocs project; see www.mkdocs.org for details\n\u2502\n\u251c\u2500\u2500 models             &lt;- Trained and serialized models, model predictions, or model summaries\n\u2502\n\u251c\u2500\u2500 notebooks          &lt;- Jupyter notebooks. Naming convention is a number (for ordering),\n\u2502                         the creator's initials, and a short `-` delimited description, e.g.\n\u2502                         `1.0-jqp-initial-data-exploration`.\n\u2502\n\u251c\u2500\u2500 pyproject.toml     &lt;- Project configuration file with package metadata for \n\u2502                         {{ cookiecutter.module_name }} and configuration for tools like black\n\u2502\n\u251c\u2500\u2500 references         &lt;- Data dictionaries, manuals, and all other explanatory materials.\n\u2502\n\u251c\u2500\u2500 reports            &lt;- Generated analysis as HTML, PDF, LaTeX, etc.\n\u2502   \u2514\u2500\u2500 figures        &lt;- Generated graphics and figures to be used in reporting\n\u2502\n\u2502\n\u2514\u2500\u2500 {{ cookiecutter.module_name }}   &lt;- Source code for use in this project.\n    \u2502\n    \u251c\u2500\u2500 __init__.py             &lt;- Makes {{ cookiecutter.module_name }} a Python module\n    \u2502\n    \u251c\u2500\u2500 config.py               &lt;- Store useful variables and configuration\n    \u2502\n    \u251c\u2500\u2500 dataset.py              &lt;- Scripts to download or generate data\n    \u2502\n    \u251c\u2500\u2500 features.py             &lt;- Code to create features for modeling\n    \u2502\n    \u251c\u2500\u2500 modeling                \n    \u2502   \u251c\u2500\u2500 __init__.py \n    \u2502   \u251c\u2500\u2500 predict.py          &lt;- Code to run model inference with trained models          \n    \u2502   \u2514\u2500\u2500 train.py            &lt;- Code to train models\n    \u2502\n    \u2514\u2500\u2500 plots.py                &lt;- Code to create visualizations\n</code></pre> <p>TODO: Trabajo futuro, construir documentaci\u00f3n para cada plantilla</p>"},{"location":"templates/#proyecto-de-desarrollo-de-libreria","title":"Proyecto de desarrollo de librer\u00eda","text":"<pre><code>uvx cookiecutter https://github.com/quantilma/template-lib\n</code></pre> Comando uvx <p><code>uvx</code> viene con la instalaci\u00f3n de <code>uv</code>. Para instalar <code>uv</code>:</p> Linux/MacOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh \n</code></pre> <pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>Para mayor informaci\u00f3n de c\u00f3mo instalar <code>uv</code>, seguir la gu\u00eda oficial de instalaci\u00f3n de uv.</p> <p>En caso de no usar <code>uv</code>, se puede reemplazar por <code>pip</code>: <pre><code>pip install cookiecutter\ncookiecutter https://github.com/quantilma/template-ds\n</code></pre></p> <p>TODO: Trabajo futuro, construir documentaci\u00f3n para cada plantilla</p>"},{"location":"templates/#otros-proyectos","title":"Otros proyectos","text":""},{"location":"tools/","title":"Herramientas y est\u00e1ndares","text":"<p>En Quantil, confiamos en un conjunto de herramientas para garantizar consistencia, eficiencia y calidad en todos nuestros proyectos. A continuaci\u00f3n, se encuentra una lista de las herramientas que utilizamos, junto con enlaces a su documentaci\u00f3n.</p>"},{"location":"tools/#herramientas","title":"Herramientas","text":""},{"location":"tools/#python-development-toolkit","title":"Python Development ToolKit","text":"<ul> <li>Version: Python 3.9+</li> <li>Linting: <code>ruff</code> Se utiliza para resaltar bugs y errores de estilo. Ver est\u00e1ndares para revisar qu\u00e9 reglas se aplican.</li> <li>Formatter: <code>ruff</code> Se utiliza para formatear c\u00f3digo y que sea m\u00e1s consistente el proyecto. Ver est\u00e1ndares para revisar qu\u00e9 reglas se aplican.</li> <li>Testing: <code>pytest</code>, <code>coverage</code></li> </ul> <p>Trabajar en el editor de texto</p> <p>Herramientas como <code>ruff</code> tienen extensiones para trabajar en su editor de texto favorito. Se recomienda fuertemente sustituir las que vengan por defecto.</p>"},{"location":"tools/#manejo-de-dependencias-y-ambientes-virtuales","title":"Manejo de dependencias y ambientes virtuales","text":"<p>UV: Se sugiere trabajar con una soluci\u00f3n moderna de manejo de dependencias como <code>uv</code> que tambi\u00e9n permite crear y manipular ambientes virtuales de una forma sencilla.  No obstante, se deja a preferencia del investigador si usa <code>conda</code>, <code>poetry</code>, <code>pixi</code> entre otros.</p> <p>Proyectos sin <code>uv</code></p> <p>Si el investigador usa una herramienta distinta a <code>uv</code>, como <code>conda</code> + <code>pip</code>, perder\u00e1 beneficios de las plantillas de proyectos como el <code>Makefile</code>. Esto se debe a que las recetas <code>make</code> utilizan <code>uv</code> de forma interna.</p>"},{"location":"tools/#control-de-versiones-y-plataformas","title":"Control de versiones y plataformas","text":"<ul> <li>Git: Utilizamos <code>git</code> como nuestro sistema de control de versiones.</li> <li>Commitizen: Lo utilizamos para crear commits con estructura espec\u00edfica (ver est\u00e1ndares) y generar changelog.</li> <li>Github: Lo utilizamos para nuestros repositorios y repositorios de clientes.</li> <li>AzureDevops: Lo utilizamos para repositorios de clientes en algunos casos (e.g., Ecopetrol).</li> </ul>"},{"location":"tools/#cicd","title":"CI/CD","text":"<p>TODO: AGREGAR INFO DE GITHUB ACTIONS, EXPLICAR QUE SE EJECUTA CODE QUALITY EN EL PUSH...</p>"},{"location":"tools/#otras-herramientas-relevantes","title":"Otras herramientas relevantes","text":"<ul> <li>Tox: Permite probar distintas versiones de python para un proyecto/librer\u00eda.</li> <li>Make: Agrupa comandos largos en recetas. Por ejemplo, <code>make test</code> ejecuta la suite de pruebas, <code>make data</code> hace todo el preprocesamiento de datos y deja el conjunto de datos listo para los modelos.</li> <li>CookieCutter: Definir</li> <li>TeamWork: Definir</li> </ul>"},{"location":"tools/#estandares","title":"Est\u00e1ndares","text":""},{"location":"tools/#pep621","title":"PEP621","text":"<p>Todos los proyectos deben llevar un archivo <code>pyproject.toml</code> con los metadatos y dependencias del proyecto. Si utiliza un manejador de dependencias moderno, este genera ademas un archivo <code>.lock</code> que permite contruir el mismo ambiente sin importar el sistema operativo.</p> <p>TODO: Revisar la configuraci\u00f3n del archivo pyproject.toml que funcione para todos los OS con librer\u00edas como pytorch</p>"},{"location":"tools/#pep8","title":"PEP8","text":"<p>TODO: COMPLETAR SECCI\u00d3N</p>"},{"location":"tools/#conventional-commits","title":"Conventional commits","text":"<p>TODO: COMPLETAR SECCI\u00d3N</p>"},{"location":"workflow_best_practices/","title":"Flujo de trabajo y mejores pr\u00e1cticas","text":""},{"location":"workflow_best_practices/#descargar-uv","title":"Descargar uv","text":"<p>Dado que las plantillas usan <code>uv</code> para CI/CD, recetas con <code>make</code> y para replicaci\u00f3n de ambientes con el archivo <code>uv.lock</code>, se recomienda fuertemente su uso. </p> Linux/MacOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh \n</code></pre> <pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>Revisar que la instalaci\u00f3n se haya completado con: <pre><code>uv --version\n</code></pre></p>"},{"location":"workflow_best_practices/#crear-un-nuevo-proyecto","title":"Crear un nuevo proyecto","text":"<p>Esta secci\u00f3n es dirigida al responsable de crear la arquitectura del proyecto usando alguna plantilla. Se sugiere que sea el l\u00edder del proyecto que configure correctamente la plantilla y cargue el repositorio a github.</p> <p>TODO</p>"},{"location":"workflow_best_practices/#paso-1","title":"Paso 1:","text":""},{"location":"workflow_best_practices/#entrar-a-un-proyecto","title":"Entrar a un proyecto","text":"<p>Si ya existe un repositorio (que se cre\u00f3 usando alguna plantilla) y entra un nuevo integrante, estos son los pasos a seguir:</p>"},{"location":"workflow_best_practices/#paso-1-configurar-usuario-de-git","title":"Paso 1: Configurar usuario de Git","text":"<p>Si es la primera vez que usa Git, debe configurar su usuario y correo:  </p> <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tuemail@example.com\"\n</code></pre>"},{"location":"workflow_best_practices/#paso-2-clonar-el-repositorio","title":"Paso 2: Clonar el repositorio","text":"<p>Una vez configurado el usuario, debe clonar el repositorio. Esto descargar\u00e1 el proyecto en su computador. La URL del repositorio se puede encontrar en GitHub, en la p\u00e1gina principal del proyecto, haciendo clic en el bot\u00f3n <code>Code</code> y copiando el enlace HTTPS. <pre><code>git clone &lt;url&gt;\n</code></pre></p>"},{"location":"workflow_best_practices/#paso-3-configurar-la-rama-para-trabajar","title":"Paso 3: Configurar la rama para trabajar","text":"<p>Despu\u00e9s de clonar el repositorio, debe entrar a su carpeta y cambiar a la rama <code>dev</code>, o a la rama indicada por el l\u00edder del proyecto: <pre><code>cd &lt;nombre-del-repositorio&gt;\ngit checkout dev\n</code></pre></p>"},{"location":"workflow_best_practices/#paso-4-subir-cambios","title":"Paso 4: Subir cambios","text":"<p>Una vez que se quieran subir cambios al repositorio, se debe primero verificar el estado. Esto mostrar\u00e1 todos los cambios que se han realizado: <pre><code>git status\n</code></pre> Luego, se deben agregar todos los archivos modificados: <pre><code>git add .\n</code></pre> Una vez agregados los cambios se realiza un commit, en donde se pide un mensaje que resume los cambios que se subir\u00e1n al repositorio. <pre><code>git commit -m \"Descripci\u00f3n corta de los cambios realizados\"\n</code></pre> Por \u00faltimo se deben subir los cambios a la rama <code>dev</code>:</p> <pre><code>git push origin dev\n</code></pre> <p>Practica comandos de Git</p> <p>Para mejorar tu manejo de Git, te recomendamos este juego interactivo que te ayudar\u00e1 a practicar comandos de Git de forma visual y din\u00e1mica.</p>"}]}